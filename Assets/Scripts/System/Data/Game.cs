using UnityEngine;
using System.IO;
using UnityEditor;
using System.Collections;
using SimpleJSON;

[System.Serializable]
public class Game
{

	public DirectoryInfo directory;

	public string name;
	public string author;
	public Sprite screenshot;
	public string executable;
    public bool useLegacyControls;

    public enum GameType { EXE, PICO8 }
    public GameType gameType;

    public bool voidGame = false;

	/// <summary>
    /// The game only takes in a directory handed down by the Playlist class, it then finds all the relevant information for the Game
    /// </summary>
    /// <param name="directory">The directory path.</param>
    public Game(string directory) 
	{
		this.directory = new DirectoryInfo (directory);

		//Check for the Winnitron Metadata JSON, and use oldschool folder naming if it doesn't exist
		if (System.IO.File.Exists (this.directory + "/winnitron_metadata.json")) {
			BuildGameJSON ();
		} else {
            BuildGame ();
		}
	}

	/// <summary>
    /// Builds a game from scratch using only what it can find in the directory.
    /// </summary>
	private void BuildGame()
	{
        Debug.Log("NO JSON!  Determining game...");
        if (DetermineGameType())
        {
            this.name = GetGameNameFromFolderName();
            this.screenshot = GetScreenshot();

            switch (gameType)
            {
                case GameType.PICO8:
                    CreatePico8HTML();        
                    Debug.Log("PICO8 Game Built! Name: " + name + " Screenshot: " + screenshot.name + " exe path: " + executable);
                    break;

                case GameType.EXE:
                    Debug.Log("EXE Game Built! Name: " + name + " Screenshot: " + screenshot.name + " exe path: " + executable);
                    break;
            }
        }
	}

    /// <summary>
    /// Builds a game using metadata information found in a JSON file generated by Winnitron Network or manually.
    /// </summary>
	private void BuildGameJSON()
	{
		var J = GM.data.LoadJson (directory.FullName + "\\winnitron_metadata.json");

		this.name = J ["title"];
		this.author = null; //No author stuff just yet
		this.screenshot = GetScreenshot();
		this.executable = Path.Combine(directory.FullName + "\\", J["executable"]);
        this.useLegacyControls = J["legacy_controls"].AsBool;

        GM.dbug.Log(null, "Game Built JSON! Name: " + name + " Screenshot: " + screenshot.name + " legacy: " + useLegacyControls + " exe path: " + executable);
	}






	//Private Functions (there's a joke here somewhere)

	private Sprite GetScreenshot()
	{
        // Load the screenshot from the games directory as a Texture2D
        var screenshotTex = new Texture2D(1024, 768);

        if (Directory.GetFiles(this.directory.ToString(), "*.png").Length > 0)
            screenshotTex.LoadImage(File.ReadAllBytes(Directory.GetFiles(directory.FullName + "/", "*.png")[0]));

        else if (gameType == GameType.PICO8)
            screenshotTex = AssetDatabase.LoadAssetAtPath<Texture2D>("Assets/Resources/default_images/pico8.png");

        else
            screenshotTex = AssetDatabase.LoadAssetAtPath<Texture2D>("Assets/Resources/default_images/exe.png");

        // Turn the Texture2D into a sprite
        return Sprite.Create(screenshotTex, new Rect(0, 0, screenshotTex.width, screenshotTex.height), new Vector2(0.5f, 0.5f));
    }

	private string GetExecutablePath()
	{
		//Find the .exe in the directory and save a reference
		return Path.Combine(directory.FullName, executable);
	}

	private string GetGameNameFromFolderName()
	{
		//Figure out the name of the game from the directory title
		var directoryName = directory.Name;

		//Replace the underscores and dashes with blank spaces
		var name = directoryName.Replace('_', ' ');
		name = name.Replace('-', ' ');

		return name;
	}

    /// <summary>
    /// Figures out what kind of game might be in the directory depending on the files inside.
    /// </summary>
    /// <returns>True if successful, false if unsuccessful in determining game type.</returns>
    private bool DetermineGameType()
    {
        if (Directory.GetFiles(this.directory.ToString(), "*.html").Length == 1)
        {       
            executable = Directory.GetFiles(this.directory.ToString(), "*.html")[0];
            Debug.Log("Determined PICO8! " + executable);
            gameType = GameType.PICO8;
            return true;
        }
        else if (Directory.GetFiles(this.directory.ToString(), "*.exe").Length == 1)
        {
            Debug.Log("Determined EXE!");
            executable = Directory.GetFiles(this.directory.ToString(), "*.exe")[0];
            gameType = GameType.EXE;
            return true;
        }

        //Can't determine game type, voiding this game
        voidGame = true;
        return false;
    }

    private void CreatePico8HTML()
    {
        //We're gonna replace the old html with a new template for pico8 so let's move the original to a safe spot
        if (Directory.GetFiles(directory.ToString(), "*.html.org").Length == 0)
            File.Copy(executable, executable + ".org");

        TextAsset Pico8HTMLTemplate = Resources.Load("Pico8HTMLTemplate") as TextAsset;
        string newHTML = Pico8HTMLTemplate.text.Replace("{{{GAME_NAME}}}", name + ".js");
        File.Delete(executable);
        System.IO.File.WriteAllText(executable, newHTML);
    }
}
